---
layout: post
title: "A Better Arduino: Building a Custom Debugger PCB (Part 2)"
date: 2020-07-18 13:32:20 +0300
description: An ST-Link and BMP compatible debugger with USART passthrough.
img: debugger/thumb.jpg # Add image post (optional)
fig-caption: Running Debugger PCB
tags: [black magic probe, ST-Link, debugger, Custom PCB]
---
<script src="https://viewer.altium.com/client/static/js/embed.js"></script>

# Introduction

In [part 1](../peterson-dev-platform) of the "A Better Arduino" series, I
designed the simplest possible STM32F7 breakout board. This first iteration PDP
board is no where near as easy to use as an Arduino. The primary problem that
the user must first properly wire a debugger to the PDP to flash their code. The
secondary problem is the lack of serial / USART functionality to do IO with the
host machine. The goal of the debugger project is to address these issues by
implementing a debugger on custom circuit board that implements serial
communication. Such a circuit could later be embedded into an all in one
development solution with the plug and play functionality of Arduino in
conjunction with a fully featured debugging suite. I completed the debugger
project in order for it to be used with the Queen's Formula team. The ultimate
goal is to lower the barrier to entry of STM32 for new team members so that they
can leverage all of its extra capability without any added complexity.

# Design

The design of the debugger was quite straight forward as the ST-Link debugger
circuit used by STM32 is standardized. The resources I referred to in order to
produce the schematic are listed below.

- [Nucleo F446RE Development Board Reference Design (built in debugger)](https://www.arrow.com/en/reference-designs/nucleo-f446re-stm32-nucleo-development-board-with-stm32f446ret6-mcu-supports-arduino-and-st-morpho-connectivity/b480d6e4390793108d4bf54c6c0abfae)
- [Design your own ST-Link/V2
  Debugger](https://luyao-han.online/diy-stlinkv2-debugger/)
- [Build a mini ST-LINK/V2 programmer/debugger for the
  STM32](http://www.micromouseonline.com/2014/01/05/mini-st-linkv2-programmer/)

I mainly used the Nucleo reference design as the other two posts listed above
did not make use of a UART pass through. All the ST-Link reference designs use
an STM32F103C8T6, which is a cortex M3 MCU. This MCU is the standard on both
STM32 development boards and standalone debuggers. A screenshot of the ST-Link
reference schematic from ST is given below.

<div class="altium-ecad-viewer" data-project-src="28781aba-67df-4157-9060-fc9fb9643811" style="border-radius: 0px 0px 4px 4px; height: 500px; border-style: solid; border-width: 1px; border-color: rgb(241, 241, 241); overflow: hidden; max-width: 1280px; max-height: 700px; box-sizing: border-box;"></div>

The parts of the schematic that require the most attention is the USB
connection, USART passthrough, Serial Wire Debug (SWD) connection to the target
MCU and SWD connection to the debugger's MCU, which is used to flash ST-Link
firmware. The USB connection is not fully shown in the above schematic, but only
consists of the D+ and D- differential pair needed for USB 2.0. In the final
debugger design, I added series 22 Ohm resistors and passed the power through a
ferrite bead to reduce noise. However, I have seen working designs that do not
include the resistors or ferrite, but it is best practice to include them in
your USB circuitry. The USB nets are marked as `USB_DP` and `USB_DM`, which are
connected to PA12 and PA11 respectively on the MCU. The USART passthrough is
implemented by connecting USART2 on the debugger MCU to a USART on the target
MCU. In the case of the custom debugger board, USART2 is just broken out to a
two-pin header. On the schematic above, the USART nets are marked by `STLINK_TX`
and `STLINK_RX` which are connected to PA2 and PA3 corresponding to USART2 on
the debugger's MCU. With this connection established, the debugger firmware will
"forward" whatever it receives from the USART on the target MCU to the host
machine. The debug connection to the target is an SWD connection which consists
of a clock (SWCLK) and data (SWDIO) line. The reference schematic names the pins
in terms of JTAG and includes some extra connections for full JTAG connectivity.
It should also be noted that there are two SWD connections on the debugger's
MCU. The second connection will be used for programming the debugger's MCU with
the ST-Link firmware. The target connection is differentiated from the debugger
MCU by leading the target net names with `T_` and the debugger ones with `STM_`.
Since the pins are named using JTAG convention, we need to find what JTAG pins
are equivalent to the two SWD connections. As expected, the SWD and JTAG clock
lines are the same so `TCK = SWCLK`. Moreover, JTAG data and SWD data are
equivalent, thus, `TMS = SWDIO`. As a result, `T_JTMS` is the `SWDIO` connection
to the target and `T_JTCK` is the target `SWCLK`. Similarly, `STM_JTMS` on the
reference schematic is the `SWDIO` to the debugger's MCU and `STM_JTCK` is the
debugger's `SWCLK` connection. Both these SWD connections were copied to the
debugger schematic. Both the target and debugger SWD connections are broken out
on headers labelled with silkscreen.

With the debugger functionality implemented in the schematic, the final step was
to power the MCU. 100 nF decoupling capacitors are placed on each VDD pin of the
debugger's MCU. The input voltage from the USB connection is 5 V and the MCU
logic level is 3.3 V. Thus, I selected an LDO for voltage regulation that JLCPCB
stocks in their library so I could send the final board out for assembly. To
learn more about JLCPCB's SMT assembly service, check out my post on using the
service [here](../can-transceiver).

## Project Viewer

Below is embedded view of the debugger project which includes the schematic
documents, PCB layout and bill of materials. The raw Altium Designer files can
be found [here](https://github.com/ethanmpeterson/boards/tree/main/Debugger).
The structure of the debugger Altium project differs from my previous posts as
it uses multiple schematic sheets. This is known as a hierarchal schematic
design. Each sheet contains a sub-circuit which is tied to other sub-circuits in
the parent schematic sheet, which allows for functionality to be divided and
organized in smaller schematic documents for larger designs. The sub-circuits
are tied together using
[ports](https://www.altium.com/documentation/altium-designer/sch-obj-portport-ad)
and [sheet
symbols](https://www.altium.com/documentation/altium-designer/sch-obj-sheetsymbolsheet-symbol-ad#:~:text=A%20sheet%20symbol%20is%20an,a%20multi%2Dsheet%20hierarchical%20design.).
A port is similar to a net label, but is used for making connections between
schematic sheets instead of normal net labels whose scope is limited to the
given sheet. Sheet symbols are used to to take a circuit in another sheet and
place it in the current schematic. Ports are then used to connect to the
internal nets of the sheet symbol.

<div class="altium-ecad-viewer" data-project-src="635e033c-5e88-466e-bfc2-b4e6128dc9e9" style="border-radius: 0px 0px 4px 4px; height: 500px; border-style: solid; border-width: 1px; border-color: rgb(241, 241, 241); overflow: hidden; max-width: 1280px; max-height: 700px; box-sizing: border-box;"></div>

- Add figure of the PCB
- Explain small design descripencies as prototype version vs final version I gave to the formula team for use.

# Software and Board Bring Up

- Refer to blog posts with downloads to normal ST-Link firmware
- Discuss issues pulling ST-Link firmware with USART pass through support.
- Discovery of black magic probe firmware, link to tutorial used to flash BMP firmware.
    - https://microcontrollerelectronics.com/how-to-convert-an-stm32f103c8t6-into-a-black-magic-probe/
- Demo Video and example connection through gdb, blink an LED on the Mock ECU

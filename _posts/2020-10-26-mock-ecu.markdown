---
layout: post
title: "CAN Bus Development: A Mock ECU"
date: 2020-10-26 13:32:20 +0300
description: An STM32 based PCB with built in CAN transceivers for CAN testing and development.
img: mock-ecu/thumb.jpg # Add image post (optional)
fig-caption: Assembled Mock ECU
tags: [CAN Bus, PCB Assembly, Altium Designer, Current Sensing, Power Monitoring]
---
<script src="https://viewer.altium.com/client/static/js/embed.js"></script>

# Introduction

The purpose of the Mock ECU (hereby referred to as the ME project) is to assist
with remote software and hardware work on the Queen's Formula team. Most
embedded software for the racecar interacts with the Engine Control Unit (ECU)
and the Power Distribution Module (PDM). Both devices employ CAN bus as their
primary communication interface with other electronics on the car, which include
the dashboard, sensors and steering wheel. The ECU broadcasts engine information
onto the CAN bus such as RPM, temperatures etc. The PDM provides information on
the car's power consumption with metrics such as battery voltage and current
draw on the PDM's various outputs. The objective in constructing a Mock ECU is
to build a device with fully featured CAN bus outputs and power monitoring
capabilities to emulate the same environment a team member's project would be
connected to on the car. The ME has an on board MCU which can be programmed to
emit CAN messages with the same format and identifiers as the ECU and PDM. Power
consumption can be measured from the 12 V output of the ME which matches a the
12 V outputs available from the real PDM. Characterizing power consumption is
important on custom electronics as the car's battery can be drained on the car
very quickly. Moreover, the team has transitioned to a small single cylinder
motorcycle engine whose alternator does not support the same power consumption.
Reducing and fully characterizing the power consumption of the car is part of a
broader goal of the electrical team to improve data acquisition. Currently the
car runs a single CAN bus but the ME accommodates two CAN buses since it will
likely be required as more sensors and more data needs be moved between device
during operation.

# Design

- Break down each sub circuit in the mock ECU
    - Buck Regulator from 12 - 5 V
        - Explain difference between linear and switch regulators
        - Wanted to remove heat produced by 12 -> 5 V LDO.
        - Provides reference design for rest of team to use.
        - Made use of TI webench for simulation and design
        - Selected a DC / DC converter that was carried by JLC PCB
    - LDO circuit
        - Needed 3.3 for the MCU / CAN transceivers but 5 V for the current sensor
    - MCU Circuit
        - Followed Datasheet for power up info and bypass caps
        - Selected boot mode explaination
        - Added SWD header and USART header to properly connect to my debugger design (link to debugger post).
        - Added Clock source such that we use full 180 Mhz
        - Explain voltage dividers for reading 12 V input voltage 12 -> 3.3 mapping
    - Current Monitor
        - Set up as a hall effect sensor
        - force 12 V through the sensor then to the output
        - Explain voltage divider for reading output 5->3.3 V mapping
    - CAN Circuitry
        - Identical circuit to the CAN transceiver duplicated twice
        - Connected to CAN controller outputs on the MCU
        - Link to CAN transceiver post for more detail

## Project Viewer

- Embed the Altium project here
- Explain discripencies between photo of the board and CAD layout
    - Made some silk screen tweaks and swapped inductor

## Manufacturing
- Used PCBWAY for fab
- Board was initially designed to use JLC PCB for fab but they were out of stock on the MCU I picked.
- Similar Process to ordering with JLC PCB but PCBWAY will let you pick any part you like (overall more expensive than JLC)

# Software and Board Bring Up
- The Mock ECU has various components that need to be tested

- Buck Converter Circuit
    - Is the output 5 V?
    - Is the voltage ripple reasonable?
- LDO Circuit
    - 3.3 V output working?
- MCU Circuit
    - Flash the MCU using the debugger?
    - Crystal Working?
    - USART working through the debugger for print statements?
    - CAN message transmission to another device like Arduino
    - ADC and current read test.
        - Use fixed value resistors and compare current reading to hand calculated.

- For software, discuss usage of arduino HAL through PlatformIO
    - Nucleo board with same MCU has arduino support and so does the ME project
    - Mention how full software stack will be covered in a future post in the "Better Arduino Series"

# Conclusion
- Mention how this is the primary dev platform I have been using
- Will serve as a basis for a culminating dev board in the better arduino series
- Important step in making a board that actually serves a purpose on top of STM32 hardware